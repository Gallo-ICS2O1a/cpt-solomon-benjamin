ball_size = 60
CPT_ball_size = 40
player_ballx = 0
player_bally = 0
CPT_ball1x = 0
CPT_ball1y = 0
CPT_ball2x = 0
CPT_ball2y = 0
CPT_ball3x = 0
CPT_ball3y = 0
CPT_ball4x = 0
CPT_ball4y = 0

score = 0
t = 0

def setup():
    size(1000, 600)

def draw():
    frameRate(10)

    global score
    global lives
    global t
    global player_ballx
    global player_bally
    global CPT_ball1x
    global CPT_ball1y
    global CPT_ball2x
    global CPT_ball2y
    global CPT_ball3x
    global CPT_ball3y
    global CPT_ball4x
    global CPT_ball4y
    background(255)

    # player ball
    t = t + 0.01
    player_ballx = noise(t)
    player_ballx = map(player_ballx, 0, 1, 0, width)
    player_bally = noise(t + 1)
    player_bally = map(player_bally, 0, 1, 0, width)
    noStroke()
    fill(255, 0, 0)
    ellipse(player_ballx, player_bally, ball_size, ball_size)

    # CPT ball 1
    CPT_ball1x = noise(t + 20)
    CPT_ball1x = map(CPT_ball1x, 0, 1, 0, width)
    CPT_ball1y = noise(t + 50)
    CPT_ball1y = map(CPT_ball1y, 0, 1, 0, width)
    fill(0, 255, 0)
    ellipse(CPT_ball1x, CPT_ball1y, CPT_ball_size, CPT_ball_size)

    # CPT ball 2
    CPT_ball2x = noise(t + 40)
    CPT_ball2x = map(CPT_ball2x, 0, 1, 0, width)
    CPT_ball2y = noise(t + 100)
    CPT_ball2y = map(CPT_ball2y, 0, 1, 0, width)
    fill(0, 0, 255)
    ellipse(CPT_ball2x, CPT_ball2y, CPT_ball_size, CPT_ball_size)

    # CPT ball 3
    CPT_ball3x = noise(t + 60)
    CPT_ball3x = map(CPT_ball3x, 0, 1, 0, width)
    CPT_ball3y = noise(t + 150)
    CPT_ball3y = map(CPT_ball3y, 0, 1, 0, width)
    fill(255, 140, 0)
    ellipse(CPT_ball3x, CPT_ball3y, CPT_ball_size, CPT_ball_size)

    # CPT ball 4
    CPT_ball4x = noise(t + 80)
    CPT_ball4x = map(CPT_ball4x, 0, 1, 0, width)
    CPT_ball4y = noise(t + 200)
    CPT_ball4y = map(CPT_ball4y, 0, 1, 0, width)
    fill(150, 50, 100)
    ellipse(CPT_ball4x, CPT_ball4y, CPT_ball_size, CPT_ball_size)

    # CPT ball1 contact
    radius_ball = ball_size / 2
    radius_ball2 = CPT_ball_size / 2
    yes = CPT_ball1x - player_ballx
    no = CPT_ball1x - player_bally
    distance = sqrt(yes ** 2 + no ** 2)
    if distance <= radius_ball + radius_ball2:
        score = 0
        
    # CPT ball2 contact
    radius_ball = ball_size / 2
    radius_ball2 = CPT_ball_size / 2
    cool = CPT_ball2x - player_ballx
    hot = CPT_ball2y - player_bally
    distance = sqrt(cool ** 2 + hot ** 2)
    if distance <= radius_ball + radius_ball2:
        score = 0
        
    # CPT ball 3 contact   
    radius_ball = ball_size / 2
    radius_ball2 = CPT_ball_size / 2
    apple = CPT_ball3x - player_ballx
    pear = CPT_ball3y - player_bally
    distance = sqrt(apple ** 2 + pear ** 2)
    if distance <= radius_ball + radius_ball2:
        score = 0
        
    # CPT ball 4 contact    
    radius_ball = ball_size / 2
    radius_ball2 = CPT_ball_size / 2
    smart = CPT_ball4x - player_ballx
    dumb = CPT_ball4y - player_bally
    distance = sqrt(smart ** 2 + dumb ** 2)
    if distance <= radius_ball + radius_ball2:
        score = 0

    # Score of player
    fill(255, 0, 0)
    textSize(30)
    text("Score: " + str(score), 30, 50)



def mousePressed():

    global score
    global ball_size
    global player_ballx
    global player_bally

    radius = ball_size / 2.0
    distance_x = abs(mouseX - player_ballx)
    distance_y = abs(mouseY - player_bally)
    hypotenuse = sqrt(distance_x ** 2 + distance_y ** 2)
    if hypotenuse <= radius:
        score += 1
